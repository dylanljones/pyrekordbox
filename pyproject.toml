
# -- Project metadata ------------------------------------------------------------------

[project]
name = "pyrekordbox"
description = "Inofficial Python package for interacting with the library of Pioneers Rekordbox DJ software."
readme = "README.md"
authors = [
    {name = "Dylan Jones", email = "dylanljones94@gmail.com"},
]
license = {file = "LICENSE"}
dynamic = ["version"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
]
requires-python = ">=3.8"
dependencies = [
    "bidict>=0.21.0",
    "blowfish>=0.6.0",
    "construct>=2.10.0",
    "numpy>=1.19.0",
    "packaging",
    "psutil>=5.9.0",
    "sqlalchemy>=2.0.0",
    "sqlcipher3-wheels",
    "frida-tools",
    "python-dateutil",
]

[project.optional-dependencies]
test = [
    "hypothesis>=6.0.0",
    "pytest>=6.2.0",
    "pytest-cov",
]

[project.urls]
Source = "https://github.com/dylanljones/pyrekordbox"
Documentation = "https://pyrekordbox.readthedocs.io/en/stable/"
Tracker = "https://github.com/dylanljones/pyrekordbox/issues"


# -- Build -----------------------------------------------------------------------------

[build-system]
requires = [
    "setuptools >= 61.0.0",
    "setuptools_scm[toml] >= 4",
    "setuptools_scm_git_archive",
    "wheel >= 0.37.0",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
platforms = ["any"]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["pyrekordbox", "pyrekordbox.*"]

[tool.setuptools_scm]
write_to = "pyrekordbox/_version.py"
git_describe_command = "git describe --dirty --tags --long --match * --first-parent"

[tool.setuptools.package-data]
pyrekordbox = ["py.typed"]


# -- Ruff ------------------------------------------------------------------------------

[tool.ruff]
exclude = [
    ".git",
    ".idea",
    "__pycache__",
    "build",
    "dist",
    ".ruff_cache",
    "*/structs.py",
    "*/_version.py",
    "docs/*",
]
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "F", # flake8
    "E", # pycodestyle Errors
    "W", # pycodestyle Warnings
    "I", # isort
    "NPY", # Numpy
    "N", # pep8-naming
    "D", # pydocstyle
    "ANN", # types-annotations
]
ignore = [
    "E203",  # Whitespace before ':'
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D401", # First line should be in imperative mood
    "D403", # First word of the first line should be capitalized
    "D404", # First word of the docstring should not be "This"
    #"N802", # Function name should be lowercase
    #"N803", # Argument name should be lowercase
    "N813", # Camelcase imported as lowercase
    #"N815", # Variable in class scope should not be mixedCase
    "N818", # Exception name should be named with an Error suffix
    "ANN001", # Missing type annotation for obj in method
    "ANN002", # Missing type annotation for args in method
    "ANN003", # Missing type annotation for kwargs in method
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN204", # Missing return type for __init__
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
]
fixable = ["ALL"]  # Allow fix for all enabled rules (when `--fix`) is provided.
unfixable = []

[tool.ruff.lint.per-file-ignores]
"*__init__.py" = ["F401"]
"*__main__.py" = ["ANN"]
"tests/*" = ["ANN"]
"rbxml.py" = ["N803"]
"tables.py" = ["N802", "N815"]


[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
combine-as-imports = true
length-sort = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


# -- Mypy ------------------------------------------------------------------------------

[tool.mypy]

strict = true
ignore_missing_imports = true  # Ignore missing type hints for third-party librarie
show_error_codes = true  # Show error codes in the output

exclude = [
    "__main__.py",
    'tools',
    'agent'
]

# Useful fine-tuning overrides to 'strict'
warn_unused_configs = true
warn_return_any = true
no_implicit_optional = false
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = false  # often useful to allow
disallow_untyped_decorators = false  # decorators are often tricky
check_untyped_defs = true

plugins = [
    "numpy.typing.mypy_plugin",
    "sqlalchemy.ext.mypy.plugin",
]

# -- Coverage --------------------------------------------------------------------------

[tool.coverage.run]
branch = false
source = ["pyrekordbox"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",

    "def __repr__",
    "def __str__",

    "@abstract",
    "@property",

    "raise AssertionError",
    "raise NotImplementedError",

    "if 0:",
    "if __name__ == .__main__.:"
]
omit = [
    "pyrekordbox/utils.py",
    "pyrekordbox/config.py",
    "pyrekordbox/_version.py",
    "pyrekordbox/__main__.py",
]
ignore_errors = true
